sum_list([1,3,5],S).
%S = 9%

product_list([1,3,5], S).
%S = 15%

adds_to(1,2,3).
mults_to(1,2,2).

%test puzzle
S = [
    [1,2],
    [3,4],
    [5,6],
    [1,2],
    [3,4],
    [5,6]
],
%get_cell
get_cell(S,[0,0],Val).
%check cages
check_cages(S, [cage(add,10,[[0,0],[0,1]]), cage(add,3,[[1,0],[1,1]])]).
%cell_value
cell_values()
%add
check_constraint(S,cage(add,X,[[0,0],[0,1]])).
%mult
check_constraint(S,cage(mutl,X,[[0,0],[0,1]])).
%sub
check_constraint(S,cage(sub,X,[[0,1],[0,0]])).
%div
check_constraint(S,cage(sub,X,[[0,0],[0,1]])).
%id
check_constraint(S,cage(id,X,[[1,1]])).
%check_cages

%solving the KenKen Puzzle

S = [
    [_,_,_,_,_,_],
    [_,_,_,_,_,_],
    [_,_,_,_,_,_],
    [_,_,_,_,_,_],
    [_,_,_,_,_,_],
    [_,_,_,_,_,_]
    ],
Cages = [
    cage(div, 2, [[0, 0], [1, 0]]),
    cage(mult, 180, [[0, 1], [0, 2], [1, 1], [1, 2]]),
    cage(mult, 12, [[0, 3], [1, 3], [2, 3]]),
    cage(sub, 2, [[0, 4], [0, 5]]),
    cage(id, 3, [[2, 0]]),
    cage(mult, 30, [[2, 1], [2, 2], [3, 2]]),
    cage(mult, 360, [[2, 4], [3, 3], [3, 4], [4, 3]]),
    cage(add, 13, [[1, 4], [1, 5], [2, 5], [3, 5]]),
    cage(mult, 20, [[4, 0], [3, 0], [3, 1]]),
    cage(sub, 5, [[4, 4], [4, 5]]),
    cage(mult, 144, [[5, 0], [5, 1], [4, 1], [4, 2]]),
    cage(add, 13, [[5, 2], [5, 3], [5, 4], [5, 5]])
],
solve(S,Cages).